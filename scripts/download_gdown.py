"""
Script t·∫£i file t·ª´ Google Drive s·ª≠ d·ª•ng gdown
Ph∆∞∆°ng ph√°p chuy√™n d·ª•ng cho Google Drive
C·∫ßn c√†i ƒë·∫∑t: pip install gdown
"""

import shutil
import zipfile
from pathlib import Path


def get_project_root():
    """L·∫•y th∆∞ m·ª•c g·ªëc c·ªßa project"""
    current_dir = Path(__file__).parent
    project_root = current_dir.parent
    return project_root


def create_directories():
    """T·∫°o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt"""
    project_root = get_project_root()
    data_dir = project_root / "data"
    processed_dir = data_dir / "processed"

    # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
    data_dir.mkdir(exist_ok=True)
    processed_dir.mkdir(exist_ok=True)

    return processed_dir


def extract_zip_file(zip_path, extract_to):
    """
    Gi·∫£i n√©n file zip

    Args:
        zip_path (Path): ƒê∆∞·ªùng d·∫´n file zip
        extract_to (Path): Th∆∞ m·ª•c ƒë√≠ch

    Returns:
        bool: True n·∫øu th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
    """
    try:
        print(f"üóÇÔ∏è  ƒêang gi·∫£i n√©n file: {zip_path.name}")
        print(f"üìÇ ƒê√≠ch: {extract_to}")

        with zipfile.ZipFile(zip_path, "r") as zip_ref:
            # L·∫•y danh s√°ch file trong zip
            file_list = zip_ref.namelist()
            print(f"üìã File zip ch·ª©a {len(file_list)} files:")

            # Hi·ªÉn th·ªã m·ªôt v√†i file ƒë·∫ßu
            for i, filename in enumerate(file_list[:5]):
                print(f"   - {filename}")
            if len(file_list) > 5:
                print(f"   ... v√† {len(file_list) - 5} files kh√°c")

            # Gi·∫£i n√©n t·∫•t c·∫£ files
            zip_ref.extractall(extract_to)

        print("‚úÖ Gi·∫£i n√©n th√†nh c√¥ng!")
        return True

    except zipfile.BadZipFile:
        print("‚ùå File kh√¥ng ph·∫£i l√† zip h·ª£p l·ªá!")
        return False
    except Exception as error:
        print(f"‚ùå L·ªói khi gi·∫£i n√©n: {error}")
        return False


def cleanup_zip_file(zip_path):
    """
    X√≥a file zip sau khi gi·∫£i n√©n

    Args:
        zip_path (Path): ƒê∆∞·ªùng d·∫´n file zip c·∫ßn x√≥a
    """
    try:
        if zip_path.exists():
            zip_path.unlink()
            print(f"üóëÔ∏è  ƒê√£ x√≥a file zip: {zip_path.name}")
        return True
    except Exception as error:
        print(f"‚ö†Ô∏è  Kh√¥ng th·ªÉ x√≥a file zip: {error}")
        return False


def download_from_gdrive():
    """
    T·∫£i file t·ª´ Google Drive s·ª≠ d·ª•ng gdown v√† x·ª≠ l√Ω ho√†n ch·ªânh
    """
    try:
        import gdown

        file_id = "1hnZHIH0eJJj92Mc6SljAkFpHNpaKxj06"
        url = f"https://drive.google.com/uc?id={file_id}"

        # T·∫°o th∆∞ m·ª•c ƒë√≠ch
        processed_dir = create_directories()

        # T√™n file t·∫£i v·ªÅ (trong th∆∞ m·ª•c scripts)
        download_path = Path(__file__).parent / "downloaded_data.zip"

        print("ƒêang t·∫£i file t·ª´ Google Drive...")
        print(f"URL: {url}")
        print(f"T·∫£i v·ªÅ: {download_path}")
        print()

        # T·∫£i file v·ªõi gdown
        result = gdown.download(url, str(download_path), quiet=False)

        if not result or not download_path.exists():
            print("‚ùå Kh√¥ng th·ªÉ t·∫£i file t·ª´ Google Drive")
            return False

        # Ki·ªÉm tra k√≠ch th∆∞·ªõc file
        file_size = download_path.stat().st_size
        print(f"ƒê√£ t·∫£i xong: {download_path.name}")
        print(f"K√≠ch th∆∞·ªõc: {file_size:,} bytes ({file_size/1024/1024:.2f} MB)")
        print()

        # Ki·ªÉm tra xem c√≥ ph·∫£i file zip kh√¥ng
        if not download_path.suffix.lower() == ".zip":
            print("File t·∫£i v·ªÅ kh√¥ng ph·∫£i l√† zip, ƒë·ªïi t√™n...")
            new_path = download_path.with_suffix(".zip")
            download_path.rename(new_path)
            download_path = new_path

        # Gi·∫£i n√©n file
        extract_success = extract_zip_file(download_path, processed_dir)

        if not extract_success:
            print("Kh√¥ng th·ªÉ gi·∫£i n√©n file")
            return False

        print()

        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        print("N·ªôi dung th∆∞ m·ª•c data/processed:")
        try:
            for item in processed_dir.iterdir():
                if item.is_file():
                    size = item.stat().st_size
                    print(f"  {item.name} ({size:,} bytes)")
                elif item.is_dir():
                    file_count = len(list(item.iterdir()))
                    print(f"   üìÅ {item.name}/ ({file_count} items)")
        except Exception as e:
            print(f"Kh√¥ng th·ªÉ li·ªát k√™ files: {e}")

        print()

        # X√≥a file zip g·ªëc
        cleanup_success = cleanup_zip_file(download_path)

        if extract_success and cleanup_success:
            print("Ho√†n th√†nh t·∫•t c·∫£ c√°c b∆∞·ªõc!")
            return True
        else:
            print("‚ö†Ô∏è  M·ªôt s·ªë b∆∞·ªõc kh√¥ng th√†nh c√¥ng ho√†n to√†n")
            return False

    except ImportError:
        print("Ch∆∞a c√†i gdown.")
        print("C√†i ƒë·∫∑t b·∫±ng l·ªánh: pip install gdown")
        return False
    except Exception as error:
        print(f"L·ªói khi t·∫£i/x·ª≠ l√Ω file: {error}")
        return False


def install_gdown_guide():
    """
    H∆∞·ªõng d·∫´n c√†i ƒë·∫∑t gdown
    """
    print("üìö H∆Ø·ªöNG D·∫™N C√ÄI ƒê·∫∂T GDOWN:")
    print("-" * 40)
    print("1Ô∏è‚É£  C√†i ƒë·∫∑t t·ª´ pip:")
    print("   pip install gdown")
    print()
    print("2Ô∏è‚É£  Ho·∫∑c t·ª´ conda:")
    print("   conda install -c conda-forge gdown")
    print()
    print("3Ô∏è‚É£  Ki·ªÉm tra c√†i ƒë·∫∑t:")
    print("   python -c \"import gdown; print('Gdown ƒë√£ c√†i ƒë·∫∑t!')\"")
    print()
    print("4Ô∏è‚É£  Sau khi c√†i ƒë·∫∑t, ch·∫°y l·∫°i script n√†y!")


def show_project_structure():
    """
    Hi·ªÉn th·ªã c·∫•u tr√∫c th∆∞ m·ª•c project sau khi ho√†n th√†nh
    """
    try:
        project_root = get_project_root()
        data_dir = project_root / "data"

        if not data_dir.exists():
            print(" Th∆∞ m·ª•c data ch∆∞a ƒë∆∞·ª£c t·∫°o")
            return

        print("üèóÔ∏è  C·∫•u tr√∫c th∆∞ m·ª•c project:")
        print(f" {project_root.name}/")
        print("    data/")

        if (data_dir / "processed").exists():
            print("     processed/")
            processed_dir = data_dir / "processed"

            # Hi·ªÉn th·ªã n·ªôi dung processed
            items = list(processed_dir.iterdir())
            for i, item in enumerate(items[:10]):  # Ch·ªâ hi·ªÉn th·ªã 10 items ƒë·∫ßu
                is_last = i == len(items) - 1 or i == 9
                prefix = "         ‚îî‚îÄ‚îÄ " if is_last else "         ‚îú‚îÄ‚îÄ "

                if item.is_file():
                    size = item.stat().st_size / (1024 * 1024)  # MB
                    print(f"{prefix}üìÑ {item.name} ({size:.2f} MB)")
                else:
                    sub_count = len(list(item.iterdir())) if item.is_dir() else 0
                    print(f"{prefix}üìÅ {item.name}/ ({sub_count} items)")

            if len(items) > 10:
                print(f"         ‚îî‚îÄ‚îÄ ... v√† {len(items) - 10} items kh√°c")

    except Exception as error:
        print(f"‚ö†Ô∏è  Kh√¥ng th·ªÉ hi·ªÉn th·ªã c·∫•u tr√∫c: {error}")


if __name__ == "__main__":
    print("=" * 60)
    print("T·∫¢I V√Ä X·ª¨ L√ù D·ªÆ LI·ªÜU T·ª™ GOOGLE DRIVE")
    print("=" * 60)
    print()

    # Ki·ªÉm tra xem gdown ƒë√£ ƒë∆∞·ª£c c√†i ch∆∞a
    try:
        import gdown  # noqa: F401

        print("Gdown ƒë√£ s·∫µn s√†ng!")
        print()

        success = download_from_gdrive()

        print("=" * 60)
        if success:
            print("HO√ÄN TH√ÄNH T·∫§T C·∫¢ C√ÅC B∆Ø·ªöC!")
            print()
            show_project_structure()
        else:
            print("QU√Å TR√åNH TH·∫§T B·∫†I!")
            print("Ki·ªÉm tra l·∫°i k·∫øt n·ªëi m·∫°ng v√† Google Drive link")
        print("=" * 60)

    except ImportError:
        print("Gdown ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t!")
        print()
        install_gdown_guide()
        print("=" * 60)
